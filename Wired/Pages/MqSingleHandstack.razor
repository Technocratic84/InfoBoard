@page "/mqhs/{CurrentBoardIndex:int}"
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavMan
@inject InfoBoard.Services.InfoService infoService;
@using InfoBoard.Data;
@inject IDbContextFactory<InfoDBcontext> localInfoContextFactory
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage BrowserStorage

<PageTitle>HS</PageTitle>

@*<head>
    <meta http-equiv="refresh" content="29">
</head>*@

@if (dataLines is null || (dataLines.Count == 0) || (@dataLines.Where(x => x.Data01Note == "current pallet" && x.InfoBoardDescription == @Banner) == null))
{
    <div>loading...</div>
    <div class="spinner"></div>
}
else
{
    <div class="IP">@IpAddress</div>
    <div class="container">
        <table>
            <tr>
                <div class="banner5">@Banner</div>
            </tr>

            <br />
            <br />

            @if (@LagWarningThreshhold > ((int.Parse(@dataLines.Where(x => x.InfoBoardType == 1).Max(x => x.Data01)))) - int.Parse(@dataLines.Where(x => x.Data01Note == "current pallet" && x.InfoBoardDescription == @Banner).FirstOrDefault().Data01))
            {
                <tr>
                    <div class="banner26">@dataLines.Where(x => x.Data01Note == "current pallet" && x.InfoBoardDescription ==@Banner).FirstOrDefault().Data01</div>
                </tr>
            }
            else
            {
                <tr>
                    <div class="banner26red">@dataLines.Where(x => x.Data01Note == "current pallet" && x.InfoBoardDescription ==@Banner).FirstOrDefault().Data01</div>
                </tr>
            }

        </table>

        <br />
        <br />
        <br />

        <SiteMessage />
    </div>
}

@code {
    [Parameter]
    public int CurrentBoardIndex { get; set; }

    private string Banner { get; set; }
    private int? LagWarningThreshhold;
    private List<InfoBoardData> dataLines = new List<InfoBoardData>();
    private HubConnection? hubConnection;
    private string IpAddress;

    protected override async Task OnInitializedAsync()
    {
        var localInfoContext = localInfoContextFactory.CreateDbContext();
        LagWarningThreshhold = localInfoContext.InfoBoardSettings.Where(x => x.SettingDescription == "LagWarningThreshholdHS").FirstOrDefault().SettingValueInt;
        if (LagWarningThreshhold == null)
        {
            LagWarningThreshhold = 20;
        }

        Banner = "HS" + CurrentBoardIndex.ToString();

        dataLines = await infoService.GetHS();

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavMan.ToAbsoluteUri("/infohub"))
        .Build();

        hubConnection.On<List<InfoBoardData>>("UpdateHandstack", HsLines =>
        {
            dataLines = HsLines;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        // timer for Refresh every 51 seconds
        //var timer2 = new System.Timers.Timer(51000);
        //timer2.Elapsed += (sender, args) =>
        //{
        //    if (!string.IsNullOrEmpty(NavMan.Uri))
        //    {
        //        InvokeAsync(() =>
        //        {
        //            NavMan.NavigateTo(NavMan.Uri, true); // Refresh the page
        //        });
        //    }
        //    else
        //    {
        //        SiteMessage.GlobalMessage = "Couldn't refresh";

        //    }
        //};
        //timer2.Start();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (IpAddress == null || IpAddress == "")
        {
            var result = await BrowserStorage.GetAsync<string>("thisip");
            IpAddress = result.Success ? result.Value : "";
        }
    }
}